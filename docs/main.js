uni._rawComponents={awaitscreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n      this.screenName = "AwaitButton";\n      this.bindState(state => {\n        if (state.screen != this.screenName)\n          return\n        if (this.paused)\n          this.play();\n      })\n      onInput = () => {\n        if (this.paused) return;\n        document.getElementById("selectAudio").play();\n        console.log("transition");\n        this.setState({screen: "MenuNewGame", prevScreen: document.body.state.screen});\n        setTimeout(() => {\n          this.remove();\n        },500);\n      }\n      document.body.onkeypress = onInput;\n      document.body.onclick = onInput; \n    ',children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n  <video muted loop class="screen screen-await AwaitButton">\n    \n    <source src="assets/AwaitButton.mp4" type="video/mp4">\n  </video>\n</template>'},canvascreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n            this.imports = [\'TextSprite\', \'ImageSprite\'];\n            var body = document.body;\n            var screens = body.querySelectorAll(".screen");\n            var screenIntro = body.find(".screen-intro");\n            var selectAudio = document.getElementById("selectAudio");\n            var calcSize = () => {\n                var scale, origin;\n                var w = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n                var h = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n                scale = Math.min(\n                    h / this.offsetHeight,    \n                    w / this.offsetWidth\n                );\n\n                this.style.transform = "translate(-50%, -50%) " + "scale(" + scale + ")"\n                this.style.top = h / 2 + "px";\n                console.log("calcsize")\n            }\n            window.addEventListener("resize", calcSize);\n            calcSize();\n            window.addEventListener("click", () => {\n                if (body.state.screen == "Intro" && !screenIntro.userPressed){\n                    document.body.find(".screen-await").remove();\n                    this.find(".loading").style.opacity = 1;\n                    screenIntro.userPressed = true;\n                    selectAudio.play();\n                }\n            });\n            this.onFullLoad = () => {\n                var config = this.find(".config-hover"); \n                var newGame = this.find(".newgame-hover");\n                var loadGame = this.find(".loadgame-hover");\n                config.addEventListener("click", () => {\n                    if (!config.usable) return;\n                    config.style.opacity = 0;\n                    this.setState({screen: "MenuConfig", prevScreen: body.state.screen});\n                });\n                newGame.addEventListener("click", () => {\n                    if (!newGame.usable) return;\n                    newGame.style.opacity = 0;\n                    this.setState({screen: "MenuNewGame", prevScreen: body.state.screen});\n                });\n                loadGame.addEventListener("click", () => {\n                    if (!loadGame.usable) return;\n                    loadGame.style.opacity = 0;\n                    this.setState({screen: "MenuLoadGame", prevScreen: body.state.screen});\n                });\n            };\n        ',children:[{context:1,closure:"",children:[]},{context:3,closure:"",children:[]},{context:5,closure:"",children:[]},{context:7,closure:"",children:[]}]}]},srcBuffer:'<template>\n    <div class="canvaScreen">\n        \n        <textsprite src="assets/sprites/newgame_hover.png" subclass="newgame-hover" screens="MenuLoadGame MenuConfig"></textsprite>\n        <textsprite src="assets/sprites/config_hover.png" subclass="config-hover" screens="MenuLoadGame MenuNewGame"></textsprite>\n        <textsprite src="assets/sprites/loadgame_hover.png" subclass="loadgame-hover" screens="MenuConfig MenuNewGame"></textsprite>\n        <imagesprite src="assets/sprites/loading.png" subclass="loading"></imagesprite>\n    </div>\n</template>'},imagesprite:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n            var img = this.find("img");\n            img.src = this.props.src;\n            img.setAttribute("usemap", "#map");\n            this.classList.add(this.props.subclass);\n        ',children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n    <div class="sprite image-sprite">\n        \n        <img height="100%">\n    </div>\n</template>'},introscreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n      this.screenName = "Intro";\n      this.userPressed = false;\n      this.bindState(state => {\n        if (state.screen != this.screenName)\n          return\n        this.style.opacity = 1;\n        this.play();\n      })\n      this.onended = function() {\n        document.body.find(".loading").remove();\n        this.setState({screen: this.userPressed ? "MenuNewGame" : "AwaitButton", prevScreen: document.body.state.screen});\n        setTimeout(() => {\n          this.remove();\n        }, this.userPressed ? 500 : 0);\n      }\n    ',children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n  <video muted class="screen screen-intro Intro">\n    \n    <source src="assets/Intro.mp4" type="video/mp4">\n  </video>\n</template>'},menuconfigscreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n      this.screenName = "MenuConfig";\n      this.translateMap = {\n        "MenuNewGame": this.parentElement.find(".MenuConfigT-1"),\n        "MenuNewGame2": this.parentElement.find(".MenuConfigT-1B"),\n        "MenuLoadGame": this.parentElement.find(".MenuConfigT-2"),\n        "MenuLoadGame2": this.parentElement.find(".MenuConfigT-2B")\n      };\n      var prevScreen = null;\n      var configFlag = false;\n      for (const screen in this.translateMap){\n        let trScreen = this.translateMap[screen];\n        trScreen.onended = () => {\n          if (this.paused){\n            this.play();\n            this.style["z-index"] = 1;\n          }\n          trScreen.style["z-index"] = 0;\n          trScreen.load();\n        };\n      }\n      this.bindState(state => {\n        if (state.screen != this.screenName){\n          if (!this.paused){\n            this.pause();\n          }\n          this.style["z-index"] = 0;\n          return\n        }\n        prevScreen = document.body.find("." + state.prevScreen);\n        var configPressed = document.body.configPressed;\n        var translate = this.translateMap[state.prevScreen + (configPressed ? "2" : "")];\n        document.body.configPressed = true;\n        \n        if (prevScreen){\n          prevScreen.style["z-index"] = 0;\n        }\n        translate.play();\n        translate.style["z-index"] = 1;\n      });\n    ',children:[{context:1,closure:"",children:[]}]},{context:3,closure:"",children:[{context:1,closure:"",children:[]}]},{context:5,closure:"",children:[{context:1,closure:"",children:[]}]},{context:7,closure:"",children:[{context:1,closure:"",children:[]}]},{context:9,closure:"",children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n  <video muted loop class="screen MenuConfig">\n    \n    <source src="assets/MenuConfig2.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuConfigT-1">\n    <source src="assets/MenuConfig.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuConfigT-1B">\n    <source src="assets/MenuConfig4.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuConfigT-2">\n    <source src="assets/MenuConfig5.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuConfigT-2B">\n    <source src="assets/MenuConfig3.mp4" type="video/mp4">\n  </video>\n</template>'},menugamescreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n      this.screenName = "MenuNewGame";\n      this.sceneB = "assets/MenuNewGame4.mp4"\n      this.translateMap = {\n        "AwaitButton": this.parentElement.find(".MenuNewGameT-1"),\n        "Intro": this.parentElement.find(".MenuNewGameT-1"),\n        "MenuConfig": this.parentElement.find(".MenuNewGameT-2"),\n        "MenuLoadGame": this.parentElement.find(".MenuNewGameT-3"),\n        "MenuLoadGame2": this.parentElement.find(".MenuNewGameT-3B")\n      };\n      var prevScreen = null;\n      for (const screen in this.translateMap){\n        let trScreen = this.translateMap[screen];\n        trScreen.onended = () => {\n          if (this.paused){\n            this.play();\n            this.style["z-index"] = 1;\n          }\n          trScreen.style["z-index"] = 0;\n          trScreen.load();\n        };\n      }\n      this.bindState(state => {\n        if (state.screen != this.screenName){\n          if (!this.paused){\n            this.pause();\n          }\n          this.style["z-index"] = 0;\n          return\n        }\n        prevScreen = document.body.find("." + state.prevScreen);\n        var configPressed = document.body.configPressed;\n\n        var translate = this.translateMap[state.prevScreen];\n        if (state.prevScreen == "MenuLoadGame" && configPressed){\n          translate = this.translateMap[state.prevScreen+"2"];\n        }\n        if (configPressed && this.src != this.sceneB){\n          this.src = this.sceneB;\n          this.load();\n        }\n        if (prevScreen){\n          prevScreen.style["z-index"] = 0;\n        }\n        translate.play();\n        translate.style["z-index"] = 1;\n      });\n    ',children:[{context:1,closure:"",children:[]}]},{context:3,closure:"",children:[{context:1,closure:"",children:[]}]},{context:5,closure:"",children:[{context:1,closure:"",children:[]}]},{context:7,closure:"",children:[{context:1,closure:"",children:[]}]},{context:9,closure:"",children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n  <video muted loop class="screen MenuNewGame">\n    \n    <source src="assets/MenuNewGame.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuNewGameT-1">\n    <source src="assets/MenuTransition.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuNewGameT-2">\n    <source src="assets/MenuTNewGame.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuNewGameT-3">\n    <source src="assets/MenuNewGame3.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuNewGameT-3B">\n    <source src="assets/MenuNewGame2.mp4" type="video/mp4">\n  </video>\n</template>'},menuloadscreen:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n      this.screenName = "MenuLoadGame";\n      this.sceneB = "assets/MenuLoad3.mp4"\n      this.translateMap = {\n        "MenuNewGame": this.parentElement.find(".MenuLoadGameT-1"),\n        "MenuNewGame2": this.parentElement.find(".MenuLoadGameT-1B"),\n        "MenuConfig": this.parentElement.find(".MenuLoadGameT-2"),\n        "MenuConfig2": this.parentElement.find(".MenuLoadGameT-2B")\n      };\n      var prevScreen = null;\n      for (const screen in this.translateMap){\n        let trScreen = this.translateMap[screen];\n        trScreen.onended = () => {\n          if (this.paused){\n            this.play();\n            this.style["z-index"] = 1;\n          }\n          trScreen.style["z-index"] = 0;\n          trScreen.load();\n        };\n      }\n      this.bindState(state => {\n        if (state.screen != this.screenName){\n          if (!this.paused){\n            this.pause();\n          }\n          this.style["z-index"] = 0;\n          return\n        }\n        prevScreen = document.body.find("." + state.prevScreen);\n        var configPressed = document.body.configPressed;\n        var translate = this.translateMap[state.prevScreen + (configPressed ? "2" : "")];\n        if (configPressed && this.src != this.sceneB){\n          this.src = this.sceneB;\n          this.load();\n        }\n        if (prevScreen){\n          prevScreen.style["z-index"] = 0;\n        }\n        translate.play();\n        translate.style["z-index"] = 1;\n      });\n    ',children:[{context:1,closure:"",children:[]}]},{context:3,closure:"",children:[{context:1,closure:"",children:[]}]},{context:5,closure:"",children:[{context:1,closure:"",children:[]}]},{context:7,closure:"",children:[{context:1,closure:"",children:[]}]},{context:9,closure:"",children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n  <video muted loop class="screen MenuLoadGame">\n    \n    <source src="assets/MenuLoad4.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuLoadGameT-1">\n    <source src="assets/MenuLoad5.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuLoadGameT-1B">\n    <source src="assets/MenuLoad.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuLoadGameT-2">\n    <source src="assets/MenuLoad2.mp4" type="video/mp4">\n  </video>\n  <video muted class="screen MenuLoadGameT-2B">\n    <source src="assets/MenuLoad6.mp4" type="video/mp4">\n  </video>\n</template>'},textsprite:{execTree:{context:0,closure:"",children:[{context:1,closure:'\n            var hoverSound = document.getElementById("hoverAudio");\n            var selectSound = document.getElementById("selectAudio");\n            var canvas = this.parentElement;\n            var usableScreens = this.props.screens.split(" ");\n            this.usable = false;\n            var img = this.find("img");\n            img.src = this.props.src;\n            this.bindState((state) => {\n                this.usable = usableScreens.indexOf(state.screen) != -1;\n            })\n            this.classList.add(this.props.subclass);\n            this.addEventListener("mouseover", () => {\n                if (!this.usable) return;\n                hoverSound.play();\n                this.style.opacity = 1;\n            });\n            this.addEventListener("mouseleave", () => {\n                if (!this.usable) return;\n                this.style.opacity = 0;\n            });\n            this.addEventListener("click", () => {\n                if (!this.usable) return;\n                selectSound.play();\n            });\n        ',children:[{context:1,closure:"",children:[]}]}]},srcBuffer:'<template>\n    <div class="sprite text-sprite">\n        \n        <img height="100%">\n    </div>\n</template>'}};const execTree={context:"document.body",closure:'\n            this.state = {\n                screen: "Intro",\n                prevScreen: null\n            };\n            this.imports = ["IntroScreen", \n                            "AwaitScreen",\n                            "MenuLoadScreen",\n                            "MenuGameScreen",\n                            "MenuConfigScreen",\n                            "CanvaScreen"];\n        ',children:[{context:1,closure:"",children:[{context:1,closure:"",children:[]}]},{context:3,closure:"",children:[{context:1,closure:"",children:[]}]},{context:5,closure:"\n                this.volume = 0.3;\n            ",children:[{context:1,closure:"",children:[]}]},{context:7,closure:"",children:[]},{context:9,closure:"",children:[]},{context:11,closure:"",children:[]},{context:13,closure:"",children:[]},{context:15,closure:"",children:[]},{context:17,closure:"",children:[]}]};uni._evalExecTree(execTree,document.body);